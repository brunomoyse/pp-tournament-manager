{
	"info": {
		"name": "PocketPair Poker API",
		"description": "Complete GraphQL API collection for PocketPair poker tournament management system. Includes authentication, user management, tournament operations, and club management.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": "1.0.0"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set base URL if not defined",
					"if (!pm.environment.get('base_url')) {",
					"    pm.environment.set('base_url', 'http://localhost:8080');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "Register User",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation RegisterUser($input: UserRegistrationInput!) { registerUser(input: $input) { id email username firstName lastName role } }\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"test@example.com\",\n      \"password\": \"password123\",\n      \"firstName\": \"John\",\n      \"lastName\": \"Doe\",\n      \"username\": \"johndoe\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Register a new user account"
					}
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Auto-extract token from response",
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.data && responseJson.data.loginUser && responseJson.data.loginUser.token) {",
									"        pm.environment.set('auth_token', responseJson.data.loginUser.token);",
									"        console.log('Token saved:', responseJson.data.loginUser.token);",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation LoginUser($input: UserLoginInput!) { loginUser(input: $input) { token user { id email username firstName lastName role } } }\",\n  \"variables\": {\n    \"input\": {\n      \"email\": \"contact@brunomoyse.be\",\n      \"password\": \"admin\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Login user and automatically save JWT token"
					}
				},
				{
					"name": "Get Current User (Me)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { me { id email username firstName lastName phone isActive role } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get current authenticated user information"
					}
				},
				{
					"name": "Get OAuth URL",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation GetOAuthUrl($provider: String!) { getOAuthUrl(provider: $provider) { authUrl csrfToken } }\",\n  \"variables\": {\n    \"provider\": \"google\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get OAuth authorization URL for provider (google/custom)"
					}
				},
				{
					"name": "OAuth Callback",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation OAuthCallback($input: OAuthCallbackInput!) { oauthCallback(input: $input) { token user { id email firstName lastName role } } }\",\n  \"variables\": {\n    \"input\": {\n      \"provider\": \"google\",\n      \"code\": \"authorization_code_from_oauth_provider\",\n      \"csrfToken\": \"csrf_token_from_get_oauth_url\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Complete OAuth authentication flow"
					}
				},
				{
					"name": "Create OAuth Client",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation CreateOAuthClient($input: CreateOAuthClientInput!) { createOAuthClient(input: $input) { client { id clientId name redirectUris scopes isActive } clientSecret } }\",\n  \"variables\": {\n    \"input\": {\n      \"name\": \"My Application\",\n      \"redirectUris\": [\"http://localhost:3000/auth/callback\"],\n      \"scopes\": [\"read\", \"write\"]\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Create OAuth client for custom applications (Admin required)"
					}
				}
			],
			"description": "Authentication related operations"
		},
		{
			"name": "üë• User Management",
			"item": [
				{
					"name": "Get Users",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetUsers($search: String, $isActive: Boolean, $limit: Int, $offset: Int) { users(search: $search, isActive: $isActive, limit: $limit, offset: $offset) { id email username firstName lastName role isActive } }\",\n  \"variables\": {\n    \"limit\": 20,\n    \"offset\": 0\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get list of users with optional filtering"
					}
				},
				{
					"name": "Get User by ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetUser($userId: ID!) { user(id: $userId) { id email username firstName lastName phone role isActive } }\",\n  \"variables\": {\n    \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get specific user by ID"
					}
				},
				{
					"name": "Get User by ID with Details",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetUserDetails($userId: ID!) { user(id: $userId) { id email username firstName lastName phone role isActive } }\",\n  \"variables\": {\n    \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get specific user details by ID"
					}
				}
			],
			"description": "User management operations"
		},
		{
			"name": "üè¢ Club Management",
			"item": [
				{
					"name": "Get All Clubs",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { clubs { id name city } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get all poker clubs"
					}
				},
				{
					"name": "Get Club by ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetClub($clubId: ID!) { club(id: $clubId) { id name city } }\",\n  \"variables\": {\n    \"clubId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get specific club by ID"
					}
				}
			],
			"description": "Club management operations"
		},
		{
			"name": "üèÜ Tournament Management",
			"item": [
				{
					"name": "Get Tournaments",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournaments($clubId: UUID, $status: TournamentStatus, $limit: Int, $offset: Int) { tournaments(clubId: $clubId, status: $status, limit: $limit, offset: $offset) { id title startTime endTime buyInCents status liveStatus maxPlayers currentPlayers club { id name city } } }\",\n  \"variables\": {\n    \"limit\": 20,\n    \"offset\": 0\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get tournaments with optional filtering"
					}
				},
				{
					"name": "Get Tournament by ID",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournament($tournamentId: ID!) { tournament(id: $tournamentId) { id title description startTime endTime buyInCents status liveStatus maxPlayers currentPlayers structure club { id name city } } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get specific tournament by ID"
					}
				},
				{
					"name": "Register for Tournament",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation RegisterForTournament($input: RegisterForTournamentInput!) { registerForTournament(input: $input) { id tournamentId userId registeredAt } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n      \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Register user for a tournament"
					}
				},
				{
					"name": "Enter Tournament Results",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation EnterTournamentResults($input: EnterTournamentResultsInput!) { enterTournamentResults(input: $input) { success message resultsEntered } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n      \"playerPositions\": [\n        {\n          \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n          \"position\": 1,\n          \"prizeAmountCents\": 50000\n        }\n      ],\n      \"playerDeals\": []\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Enter final results for a tournament (Manager required)"
					}
				},
				{
					"name": "Update Tournament Status",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation UpdateTournamentStatus($input: UpdateTournamentStatusInput!) { updateTournamentStatus(input: $input) { id status liveStatus } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n      \"status\": \"IN_PROGRESS\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Update tournament status (Manager required)"
					}
				}
			],
			"description": "Tournament management operations"
		},
		{
			"name": "‚è∞ Tournament Clock",
			"item": [
				{
					"name": "Get Tournament Clock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournamentClock($tournamentId: ID!) { tournamentClock(tournamentId: $tournamentId) { id tournamentId status currentLevel timeRemaining totalLevels isPaused } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get tournament clock state"
					}
				},
				{
					"name": "Create Tournament Clock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation CreateTournamentClock($tournamentId: ID!) { createTournamentClock(tournamentId: $tournamentId) { id tournamentId status currentLevel timeRemaining totalLevels isPaused } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Initialize tournament clock (Manager required)"
					}
				},
				{
					"name": "Start Tournament Clock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation StartTournamentClock($tournamentId: ID!) { startTournamentClock(tournamentId: $tournamentId) { id tournamentId status currentLevel timeRemaining totalLevels isPaused } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Start tournament clock (Manager required)"
					}
				},
				{
					"name": "Pause Tournament Clock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation PauseTournamentClock($tournamentId: ID!) { pauseTournamentClock(tournamentId: $tournamentId) { id tournamentId status currentLevel timeRemaining totalLevels isPaused } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Pause tournament clock (Manager required)"
					}
				},
				{
					"name": "Resume Tournament Clock",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation ResumeTournamentClock($tournamentId: ID!) { resumeTournamentClock(tournamentId: $tournamentId) { id tournamentId status currentLevel timeRemaining totalLevels isPaused } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Resume tournament clock (Manager required)"
					}
				},
				{
					"name": "Advance Tournament Level",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation AdvanceTournamentLevel($tournamentId: ID!) { advanceTournamentLevel(tournamentId: $tournamentId) { id tournamentId status currentLevel timeRemaining totalLevels isPaused } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Manually advance to next level (Manager required)"
					}
				},
				{
					"name": "Revert Tournament Level",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation RevertTournamentLevel($tournamentId: ID!) { revertTournamentLevel(tournamentId: $tournamentId) { id tournamentId status currentLevel timeRemaining totalLevels isPaused } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Manually revert to previous level (Manager required)"
					}
				},
				{
					"name": "Get Tournament Structure",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournamentStructure($tournamentId: ID!) { tournamentStructure(tournamentId: $tournamentId) { level smallBlind bigBlind ante duration } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get tournament blind structure levels"
					}
				}
			],
			"description": "Tournament clock and timing operations"
		},
		{
			"name": "ü™ë Table & Seating Management",
			"item": [
				{
					"name": "Create Tournament Table",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation CreateTournamentTable($input: CreateTournamentTableInput!) { createTournamentTable(input: $input) { id tableNumber maxSeats currentSeats tournament { id title } } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n      \"tableNumber\": 1,\n      \"maxSeats\": 9\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Create a new tournament table (Club Manager required)"
					}
				},
				{
					"name": "Assign Player to Seat",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation AssignPlayerToSeat($input: AssignPlayerToSeatInput!) { assignPlayerToSeat(input: $input) { id seatNumber stackSize player { id firstName lastName } table { id tableNumber } } }\",\n  \"variables\": {\n    \"input\": {\n      \"tableId\": \"01234567-8901-2345-6789-012345678901\",\n      \"playerId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n      \"seatNumber\": 1,\n      \"stackSize\": 20000\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Assign player to specific seat (Club Manager required)"
					}
				},
				{
					"name": "Move Player",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation MovePlayer($input: MovePlayerInput!) { movePlayer(input: $input) { id seatNumber stackSize player { id firstName lastName } table { id tableNumber } } }\",\n  \"variables\": {\n    \"input\": {\n      \"playerId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n      \"fromTableId\": \"01234567-8901-2345-6789-012345678901\",\n      \"toTableId\": \"01234567-8901-2345-6789-012345678902\",\n      \"toSeatNumber\": 3\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Move player to different table/seat (Club Manager required)"
					}
				},
				{
					"name": "Update Stack Size",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation UpdateStackSize($input: UpdateStackSizeInput!) { updateStackSize(input: $input) { id seatNumber stackSize player { id firstName lastName } } }\",\n  \"variables\": {\n    \"input\": {\n      \"playerId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n      \"newStackSize\": 15000\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Update player's chip stack (Manager required)"
					}
				},
				{
					"name": "Balance Tables",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation BalanceTables($input: BalanceTablesInput!) { balanceTables(input: $input) { id seatNumber stackSize player { id firstName lastName } table { id tableNumber } } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Auto-balance players across tables (Manager required)"
					}
				},
				{
					"name": "Get Seat Assignments",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetSeatAssignments($tournamentId: ID, $tableId: ID, $limit: Int, $offset: Int) { seatAssignments(tournamentId: $tournamentId, tableId: $tableId, limit: $limit, offset: $offset) { id seatNumber stackSize player { id firstName lastName } table { id tableNumber } } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n    \"limit\": 50,\n    \"offset\": 0\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get current seat assignments for tournament"
					}
				}
			],
			"description": "Table and seating management operations"
		},
		{
			"name": "üìä Leaderboards & Statistics",
			"item": [
				{
					"name": "Get Tournament Leaderboard (Legacy)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetLeaderboard($period: LeaderboardPeriod, $clubId: UUID, $limit: Int) { leaderboard(period: $period, clubId: $clubId, limit: $limit) { entries { rank user { id firstName lastName } totalTournaments totalWinnings netProfit itmPercentage roiPercentage points } totalPlayers } }\",\n  \"variables\": {\n    \"period\": \"ALL_TIME\",\n    \"limit\": 20\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get tournament leaderboard rankings (updated query)"
					}
				},
				{
					"name": "Get Tournament Players",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournamentPlayers($tournamentId: ID!) { tournamentPlayers(tournamentId: $tournamentId) { id user { id firstName lastName email } registeredAt position prizeAmountCents pointsAwarded } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get all players registered for a tournament"
					}
				}
			],
			"description": "Leaderboards and statistics"
		},
		{
			"name": "üí∏ Player Deals & Payouts",
			"item": [
				{
					"name": "Enter Tournament Results with Deal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation EnterTournamentResultsWithDeal($input: EnterTournamentResultsInput!) { enterTournamentResults(input: $input) { success results { id finalPosition prizeCents points } deal { id dealType totalAmountCents affectedPositions customPayouts { userId amountCents } } } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n      \"playerPositions\": [\n        {\n          \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n          \"finalPosition\": 1\n        },\n        {\n          \"userId\": \"eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee\",\n          \"finalPosition\": 2\n        }\n      ],\n      \"deal\": {\n        \"dealType\": \"EVEN_SPLIT\",\n        \"affectedPositions\": [1, 2],\n        \"notes\": \"Players agreed to split first and second place\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Enter tournament results with player deal (Manager required)"
					}
				},
				{
					"name": "Enter Results with Custom Deal",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation EnterResultsCustomDeal($input: EnterTournamentResultsInput!) { enterTournamentResults(input: $input) { success results { id finalPosition prizeCents } deal { id dealType customPayouts { userId amountCents } } } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n      \"playerPositions\": [\n        {\n          \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n          \"finalPosition\": 1\n        },\n        {\n          \"userId\": \"eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee\",\n          \"finalPosition\": 2\n        }\n      ],\n      \"deal\": {\n        \"dealType\": \"CUSTOM\",\n        \"affectedPositions\": [1, 2],\n        \"customPayouts\": [\n          {\n            \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n            \"amountCents\": 30000\n          },\n          {\n            \"userId\": \"eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee\",\n            \"amountCents\": 20000\n          }\n        ],\n        \"notes\": \"Custom split based on chip counts\"\n      }\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Enter tournament results with custom deal payouts (Manager required)"
					}
				}
			],
			"description": "Player deals and payout management"
		},
		{
			"name": "üìà Enhanced User Operations",
			"item": [
				{
					"name": "Get My Tournament Registrations",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { myTournamentRegistrations { id tournamentId userId registrationTime status notes } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get current user's tournament registrations"
					}
				},
				{
					"name": "Get My Recent Tournament Results",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetMyRecentResults($limit: Int) { myRecentTournamentResults(limit: $limit) { result { id finalPosition prizeCents points createdAt } tournament { id title startTime buyInCents club { name } } } }\",\n  \"variables\": {\n    \"limit\": 10\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get current user's recent tournament results with tournament details"
					}
				},
				{
					"name": "Get My Tournament Statistics",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { myTournamentStatistics { last7Days { totalTournaments totalWinnings totalBuyIns netProfit itmPercentage roiPercentage } last30Days { totalTournaments totalWinnings totalBuyIns netProfit itmPercentage roiPercentage } lastYear { totalTournaments totalWinnings totalBuyIns netProfit itmPercentage roiPercentage } } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get current user's tournament statistics for different time periods"
					}
				}
			],
			"description": "Enhanced user-specific operations"
		},
		{
			"name": "üèüÔ∏è Advanced Tournament Operations",
			"item": [
				{
					"name": "Get Tournament State",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournamentState($tournamentId: UUID!) { tournamentState(tournamentId: $tournamentId) { id currentLevel playersRemaining breakUntil currentSmallBlind currentBigBlind currentAnte levelStartedAt levelDurationMinutes } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get tournament live state data"
					}
				},
				{
					"name": "Update Tournament State",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation UpdateTournamentState($input: UpdateTournamentStateInput!) { updateTournamentState(input: $input) { id currentLevel playersRemaining currentSmallBlind currentBigBlind currentAnte } }\",\n  \"variables\": {\n    \"input\": {\n      \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n      \"currentLevel\": 3,\n      \"playersRemaining\": 45,\n      \"currentSmallBlind\": 200,\n      \"currentBigBlind\": 400,\n      \"currentAnte\": 50\n    }\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Update tournament live state (Manager required)"
					}
				},
				{
					"name": "Get Tournament Complete Data",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournamentComplete($tournamentId: UUID!) { tournamentComplete(tournamentId: $tournamentId) { tournament { id title description startTime endTime buyInCents status liveStatus club { name } } liveState { currentLevel playersRemaining currentSmallBlind currentBigBlind } totalRegistered } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get complete tournament data including static info, live state, and registration count"
					}
				}
			],
			"description": "Advanced tournament operations and state management"
		},
		{
			"name": "üóÇÔ∏è Enhanced Table & Seating",
			"item": [
				{
					"name": "Get Tournament Seating Chart",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournamentSeatingChart($tournamentId: UUID!) { tournamentSeatingChart(tournamentId: $tournamentId) { tournament { id title } tables { table { id tableNumber maxSeats } seats { assignment { seatNumber stackSize } player { firstName lastName } } } unassignedPlayers { id firstName lastName } } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get complete tournament seating chart with tables and player assignments"
					}
				},
				{
					"name": "Get Tournament Tables",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTournamentTables($tournamentId: UUID!) { tournamentTables(tournamentId: $tournamentId) { id tableNumber maxSeats isActive tableName createdAt } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get all tables for a tournament"
					}
				},
				{
					"name": "Get Table Seat Assignments",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetTableSeatAssignments($tableId: UUID!) { tableSeatAssignments(tableId: $tableId) { assignment { id seatNumber stackSize assignedAt } player { id firstName lastName } } }\",\n  \"variables\": {\n    \"tableId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get current seat assignments for a specific table"
					}
				},
				{
					"name": "Get Tournament Seating History",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetSeatingHistory($tournamentId: UUID!, $limit: Int) { tournamentSeatingHistory(tournamentId: $tournamentId, limit: $limit) { id seatNumber stackSize isCurrent assignedAt unassignedAt } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n    \"limit\": 100\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get seating history for a tournament (useful for tracking moves)"
					}
				},
				{
					"name": "Eliminate Player",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation EliminatePlayer($tournamentId: ID!, $userId: ID!, $notes: String) { eliminatePlayer(tournamentId: $tournamentId, userId: $userId, notes: $notes) }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\",\n    \"userId\": \"ffffffff-ffff-ffff-ffff-ffffffffffff\",\n    \"notes\": \"Eliminated in level 5\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Eliminate a player from the tournament (Manager required)"
					}
				}
			],
			"description": "Enhanced table and seating management operations"
		},
		{
			"name": "üìä Enhanced Leaderboards",
			"item": [
				{
					"name": "Get Leaderboard All Time",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetLeaderboard($period: LeaderboardPeriod, $limit: Int, $clubId: UUID) { leaderboard(period: $period, limit: $limit, clubId: $clubId) { entries { rank user { firstName lastName } totalTournaments totalWinnings totalBuyIns netProfit itmPercentage roiPercentage averageFinish firstPlaces finalTables points } totalPlayers period } }\",\n  \"variables\": {\n    \"period\": \"ALL_TIME\",\n    \"limit\": 50\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get comprehensive leaderboard with all statistics"
					}
				},
				{
					"name": "Get Leaderboard Last 30 Days",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetLeaderboard30Days($period: LeaderboardPeriod, $limit: Int) { leaderboard(period: $period, limit: $limit) { entries { rank user { firstName lastName email } totalTournaments totalWinnings netProfit itmPercentage roiPercentage points } totalPlayers } }\",\n  \"variables\": {\n    \"period\": \"LAST_30_DAYS\",\n    \"limit\": 20\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get leaderboard for last 30 days"
					}
				},
				{
					"name": "Get Club Leaderboard",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query GetClubLeaderboard($clubId: UUID, $period: LeaderboardPeriod) { leaderboard(clubId: $clubId, period: $period) { entries { rank user { firstName lastName } totalTournaments totalWinnings points } totalPlayers } }\",\n  \"variables\": {\n    \"clubId\": \"01234567-8901-2345-6789-012345678901\",\n    \"period\": \"ALL_TIME\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get leaderboard filtered by specific club"
					}
				}
			],
			"description": "Enhanced leaderboard operations with comprehensive statistics"
		},
		{
			"name": "üîî Real-time Subscriptions",
			"item": [
				{
					"name": "Subscribe to Tournament Clock Updates",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"subscription TournamentClockUpdates($tournamentId: ID!) { tournamentClockUpdates(tournamentId: $tournamentId) { tournamentId status currentLevel timeRemainingSeconds smallBlind bigBlind ante isBreak nextLevelPreview { smallBlind bigBlind ante } } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Subscribe to real-time tournament clock updates (WebSocket)"
					}
				},
				{
					"name": "Subscribe to Tournament Registrations",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"subscription { tournamentRegistrations { tournamentId player { user { firstName lastName } registration { registrationTime } } eventType } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Subscribe to player registration events across all tournaments (WebSocket)"
					}
				},
				{
					"name": "Subscribe to Tournament Seating Changes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"subscription TournamentSeatingChanges($tournamentId: ID!) { tournamentSeatingChanges(tournamentId: $tournamentId) { eventType message timestamp affectedPlayer { firstName lastName } affectedAssignment { seatNumber stackSize } } }\",\n  \"variables\": {\n    \"tournamentId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Subscribe to seating changes for a specific tournament (WebSocket)"
					}
				},
				{
					"name": "Subscribe to Club Seating Changes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"subscription ClubSeatingChanges($clubId: ID!) { clubSeatingChanges(clubId: $clubId) { eventType tournamentId message timestamp affectedPlayer { firstName lastName } } }\",\n  \"variables\": {\n    \"clubId\": \"01234567-8901-2345-6789-012345678901\"\n  }\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Subscribe to seating changes for all tournaments in a club (Manager required, WebSocket)"
					}
				},
				{
					"name": "Subscribe to Simple Tick",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"subscription { tick }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Subscribe to simple tick counter (testing WebSocket connection)"
					}
				}
			],
			"description": "Real-time subscriptions for live updates (WebSocket required)"
		},
		{
			"name": "üîß System & Utilities",
			"item": [
				{
					"name": "Server Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": ["{{base_url}}"],
							"path": ["health"]
						},
						"description": "Check if the server is running and database is connected"
					}
				},
				{
					"name": "Get Server Time",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { serverTime }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get current server time (UTC)"
					}
				},
				{
					"name": "GraphQL Schema Introspection",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"query { __schema { types { name description fields { name type { name } } } } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Get GraphQL schema information for development"
					}
				}
			],
			"description": "System utilities and health checks"
		},
		{
			"name": "‚ùå Error Testing",
			"item": [
				{
					"name": "Test - No Authentication",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation { createTournamentClock(tournamentId: \\\"01234567-8901-2345-6789-012345678901\\\") { id } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Test protected endpoint without authentication - should return: 'You must be logged in to perform this action'"
					}
				},
				{
					"name": "Test - Invalid Token",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "invalid-token-here",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"query\": \"mutation { createTournamentClock(tournamentId: \\\"01234567-8901-2345-6789-012345678901\\\") { id } }\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/graphql",
							"host": ["{{base_url}}"],
							"path": ["graphql"]
						},
						"description": "Test protected endpoint with invalid token - should return: 'You must be logged in to perform this action'"
					}
				}
			],
			"description": "Test error scenarios and improved error messages"
		}
	]
}